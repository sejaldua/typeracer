{"ast":null,"code":"var _jsxFileName = \"/Users/sejaldua/Desktop/DIS/typeracer/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  }, \"Welcome to typeracer!\"); // The base speed per character\n\n  time_setting = 30; // How much to 'sway' (random * this-many-milliseconds)\n\n  random_setting = 100; // The text to use NB use \\n not real life line breaks!\n\n  input_text = \"How fast can you type?\"; // Where to fill up\n\n  target_setting = $(\"#output\"); // Launch that function!\n\n  type(input_text, target_setting, 0, time_setting, random_setting);\n\n  function type(input, target, current, time, random) {\n    // If the current count is larger than the length of the string, then for goodness sake, stop\n    if (current > input.length) {\n      // Write Complete\n      console.log(\"Complete.\");\n    } else {\n      // console.log(current)\n      // Increment the marker\n      current += 1; // fill the target with a substring, from the 0th character to the current one\n\n      target.text(input.substring(0, current)); // Wait ...\n\n      setTimeout(function () {\n        // do the function again, with the newly incremented marker\n        type(input, target, current, time, random); // Time it the normal time, plus a random amount of sway\n      }, time + Math.random() * random);\n    }\n  }\n  /*\n  * The typing test stuff\n  */\n\n\n  var character_length = 31;\n  var index = 0;\n  var letters = $(\"#input_text\").val();\n  var started = false;\n  var current_string = letters.substring(index, index + character_length);\n  var wordcount = 0;\n  $(\"html, body\").click(function () {\n    $(\"#textarea\").focus();\n  });\n  $(\"#target\").text(current_string);\n  $(window).keypress(function (evt) {\n    if (!started) {\n      start();\n      started = true;\n    }\n\n    evt = evt || window.event;\n    var charCode = evt.which || evt.keyCode;\n    var charTyped = String.fromCharCode(charCode);\n\n    if (charTyped == letters.charAt(index)) {\n      if (charTyped == \" \") {\n        wordcount++;\n        $(\"#wordcount\").text(wordcount);\n      }\n\n      index++;\n      current_string = letters.substring(index, index + character_length);\n      $(\"#target\").text(current_string);\n      $(\"#your-attempt\").append(charTyped);\n\n      if (index == letters.length) {\n        wordcount++;\n        $(\"#wordcount\").text(wordcount);\n        $(\"#timer\").text(timer);\n\n        if (timer == 0) {\n          timer = 1;\n        }\n\n        wpm = Math.round(wordcount / (timer / 60));\n        $(\"#wpm\").text(wpm);\n        stop();\n        finished();\n      }\n    } else {\n      $(\"#your-attempt\").append(\"<span class='wrong'>\" + charTyped + \"</span>\");\n      errors++;\n      $(\"#errors\").text(errors);\n    }\n  });\n  var timer = 0;\n  var wpm = 0;\n  var errors = 0;\n  var interval_timer;\n  $(\"#reset\").click(function () {\n    reset();\n  });\n  $(\"#change\").click(function () {\n    $(\"#input_text\").show().focus();\n  });\n  $(\"#pause\").click(function () {\n    stop();\n  });\n  $(\"#input_text\").change(function () {\n    reset();\n  });\n\n  function start() {\n    interval_timer = setInterval(function () {\n      timer++;\n      $(\"#timer\").text(timer);\n      wpm = Math.round(wordcount / (timer / 60));\n      $(\"#wpm\").text(wpm);\n    }, 1000);\n  }\n\n  function stop() {\n    clearInterval(interval_timer);\n    started = false;\n  }\n\n  function reset() {\n    $(\"#input_text\").blur().hide();\n    ;\n    $(\"#your-attempt\").text(\"\");\n    index = 0;\n    errors = 0;\n    clearInterval(interval_timer);\n    started = false;\n    letters = $(\"#input_text\").val();\n    $(\"#wpm\").text(\"0\");\n    $(\"#timer\").text(\"0\");\n    $(\"#wordcount\").text(\"0\");\n    timer = 0;\n    wpm = 0;\n    current_string = letters.substring(index, index + character_length);\n    $(\"#target\").text(current_string);\n  }\n\n  function finished() {\n    alert(\"Congratulations!\\nWords per minute: \" + wpm + \"\\nWordcount: \" + wordcount + \"\\nErrors:\" + errors);\n  }\n\n  var window_focus;\n  $(window).focus(function () {\n    window_focus = true;\n  }).blur(function () {\n    window_focus = false;\n  });\n  $(document).ready(function () {\n    if (window_focus) {\n      $(\"#focus\").hide();\n    }\n\n    $(window).focus(function () {\n      $(\"#focus\").hide();\n    });\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/sejaldua/Desktop/DIS/typeracer/src/App.js"],"names":["React","App","time_setting","random_setting","input_text","target_setting","$","type","input","target","current","time","random","length","console","log","text","substring","setTimeout","Math","character_length","index","letters","val","started","current_string","wordcount","click","focus","window","keypress","evt","start","event","charCode","which","keyCode","charTyped","String","fromCharCode","charAt","append","timer","wpm","round","stop","finished","errors","interval_timer","reset","show","change","setInterval","clearInterval","blur","hide","alert","window_focus","document","ready"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nconst App = () => {\n  return (<div className=\"App\">Welcome to typeracer!</div>);\n    \n  // The base speed per character\n  time_setting = 30;\n  // How much to 'sway' (random * this-many-milliseconds)\n  random_setting = 100;\n  // The text to use NB use \\n not real life line breaks!\n  input_text = \"How fast can you type?\";\n  // Where to fill up\n  target_setting = $(\"#output\");\n  // Launch that function!\n  type(input_text, target_setting, 0, time_setting, random_setting);\n\n  function type(input, target, current, time, random){\n    // If the current count is larger than the length of the string, then for goodness sake, stop\n    if(current > input.length){\n      // Write Complete\n      console.log(\"Complete.\");\n    }\n    else{\n    // console.log(current)\n      // Increment the marker\n      current += 1;\n      // fill the target with a substring, from the 0th character to the current one\n      target.text(input.substring(0,current));\n      // Wait ...\n      setTimeout(function(){\n        // do the function again, with the newly incremented marker\n        type(input, target, current, time, random);\n        // Time it the normal time, plus a random amount of sway\n      },time + Math.random()*random);\n    }\n  }\n\n  /*\n  * The typing test stuff\n  */\n\n  var character_length = 31;\n  var index = 0;\n  var letters =  $(\"#input_text\").val();\n  var started = false;\n  var current_string = letters.substring(index, index + character_length);\n\n  var wordcount = 0;\n\n  $(\"html, body\").click(function(){\n    $(\"#textarea\").focus();\n  });\n\n  $(\"#target\").text(current_string);\n  $(window).keypress(function(evt){\n    if(!started){\n      start();\n      started = true;\n    }\n    evt = evt || window.event;\n    var charCode = evt.which || evt.keyCode;\n    var charTyped = String.fromCharCode(charCode);\n    if(charTyped == letters.charAt(index)){\n      if(charTyped == \" \"){\n        wordcount ++;\n        $(\"#wordcount\").text(wordcount);\n      }\n      index ++;\n      current_string = letters.substring(index, index + character_length);\n      $(\"#target\").text(current_string);\n      $(\"#your-attempt\").append(charTyped);\n      if(index == letters.length){\n        wordcount ++;\n        $(\"#wordcount\").text(wordcount);\n        $(\"#timer\").text(timer);\n        if(timer == 0){\n          timer = 1;\n        }\n        wpm = Math.round(wordcount / (timer / 60));\n        $(\"#wpm\").text(wpm);\n        stop();\n        finished();\n      }\n    }else{\n      $(\"#your-attempt\").append(\"<span class='wrong'>\" + charTyped + \"</span>\");\n      errors ++;\n      $(\"#errors\").text(errors);\n    }\n  });\n\n  var timer = 0;\n  var wpm = 0;\n  var errors = 0;\n  var interval_timer;\n\n  $(\"#reset\").click(function(){\n    reset();\n  });\n\n  $(\"#change\").click(function(){\n    $(\"#input_text\").show().focus();\n  });\n\n  $(\"#pause\").click(function(){\n    stop();\n  });\n\n  $(\"#input_text\").change(function(){\n    reset();\n  });\n\n  function start(){\n    interval_timer = setInterval(function(){\n      timer ++;\n      $(\"#timer\").text(timer);\n      wpm = Math.round(wordcount / (timer / 60));\n      $(\"#wpm\").text(wpm);\n    }, 1000)\n  }\n\n  function stop(){\n    clearInterval(interval_timer);\n    started = false;\n  }\n\n  function reset(){\n    $(\"#input_text\").blur().hide();;\n    $(\"#your-attempt\").text(\"\");\n    index = 0;\n    errors = 0;\n    clearInterval(interval_timer);\n    started = false;\n    letters = $(\"#input_text\").val();\n    $(\"#wpm\").text(\"0\");\n    $(\"#timer\").text(\"0\");\n    $(\"#wordcount\").text(\"0\");\n    timer = 0;\n    wpm = 0;\n    current_string = letters.substring(index, index + character_length);\n    $(\"#target\").text(current_string);\n  }\n\n  function finished(){\n    alert(\"Congratulations!\\nWords per minute: \" + wpm + \"\\nWordcount: \" + wordcount + \"\\nErrors:\" + errors);\n  }\n\n  var window_focus;\n\n  $(window).focus(function() {\n      window_focus = true;\n  }).blur(function() {\n    window_focus = false;\n  });\n\n  $(document).ready(function(){\n    if(window_focus){\n      $(\"#focus\").hide();\n    }\n    $(window).focus(function() {\n      $(\"#focus\").hide();\n    });\n  });\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}