{"ast":null,"code":"var _jsxFileName = \"/Users/sejaldua/Desktop/DIS/typeracer/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*\n * The animation at the start, made from my previous pen\n * https://codepen.io/EightArmsHQ/pen/HJsav\n */\n// The base speed per character\n\ntime_setting = 30; // How much to 'sway' (random * this-many-milliseconds)\n\nrandom_setting = 100; // The text to use NB use \\n not real life line breaks!\n\ninput_text = \"How fast can you type?\"; // Where to fill up\n\ntarget_setting = $(\"#output\"); // Launch that function!\n\ntype(input_text, target_setting, 0, time_setting, random_setting);\n\nfunction type(input, target, current, time, random) {\n  // If the current count is larger than the length of the string, then for goodness sake, stop\n  if (current > input.length) {\n    // Write Complete\n    console.log(\"Complete.\");\n  } else {\n    // console.log(current)\n    // Increment the marker\n    current += 1; // fill the target with a substring, from the 0th character to the current one\n\n    target.text(input.substring(0, current)); // Wait ...\n\n    setTimeout(function () {\n      // do the function again, with the newly incremented marker\n      type(input, target, current, time, random); // Time it the normal time, plus a random amount of sway\n    }, time + Math.random() * random);\n  }\n}\n/*\n * The typing test stuff\n */\n\n\nvar character_length = 31;\nvar index = 0;\nvar letters = $(\"#input_text\").val();\nvar started = false;\nvar current_string = letters.substring(index, index + character_length);\nvar wordcount = 0;\n$(\"html, body\").click(function () {\n  $(\"#textarea\").focus();\n});\n$(\"#target\").text(current_string);\n$(window).keypress(function (evt) {\n  if (!started) {\n    start();\n    started = true;\n  }\n\n  evt = evt || window.event;\n  var charCode = evt.which || evt.keyCode;\n  var charTyped = String.fromCharCode(charCode);\n\n  if (charTyped == letters.charAt(index)) {\n    if (charTyped == \" \") {\n      wordcount++;\n      $(\"#wordcount\").text(wordcount);\n    }\n\n    index++;\n    current_string = letters.substring(index, index + character_length);\n    $(\"#target\").text(current_string);\n    $(\"#your-attempt\").append(charTyped);\n\n    if (index == letters.length) {\n      wordcount++;\n      $(\"#wordcount\").text(wordcount);\n      $(\"#timer\").text(timer);\n\n      if (timer == 0) {\n        timer = 1;\n      }\n\n      wpm = Math.round(wordcount / (timer / 60));\n      $(\"#wpm\").text(wpm);\n      stop();\n      finished();\n    }\n  } else {\n    $(\"#your-attempt\").append(\"<span class='wrong'>\" + charTyped + \"</span>\");\n    errors++;\n    $(\"#errors\").text(errors);\n  }\n});\nvar timer = 0;\nvar wpm = 0;\nvar errors = 0;\nvar interval_timer;\n$(\"#reset\").click(function () {\n  reset();\n});\n$(\"#change\").click(function () {\n  $(\"#input_text\").show().focus();\n});\n$(\"#pause\").click(function () {\n  stop();\n});\n$(\"#input_text\").change(function () {\n  reset();\n});\n\nfunction start() {\n  interval_timer = setInterval(function () {\n    timer++;\n    $(\"#timer\").text(timer);\n    wpm = Math.round(wordcount / (timer / 60));\n    $(\"#wpm\").text(wpm);\n  }, 1000);\n}\n\nfunction stop() {\n  clearInterval(interval_timer);\n  started = false;\n}\n\nfunction reset() {\n  $(\"#input_text\").blur().hide();\n  ;\n  $(\"#your-attempt\").text(\"\");\n  index = 0;\n  errors = 0;\n  clearInterval(interval_timer);\n  started = false;\n  letters = $(\"#input_text\").val();\n  $(\"#wpm\").text(\"0\");\n  $(\"#timer\").text(\"0\");\n  $(\"#wordcount\").text(\"0\");\n  timer = 0;\n  wpm = 0;\n  current_string = letters.substring(index, index + character_length);\n  $(\"#target\").text(current_string);\n}\n\nfunction finished() {\n  alert(\"Congratulations!\\nWords per minute: \" + wpm + \"\\nWordcount: \" + wordcount + \"\\nErrors:\" + errors);\n}\n\nvar window_focus;\n$(window).focus(function () {\n  window_focus = true;\n}).blur(function () {\n  window_focus = false;\n});\n$(document).ready(function () {\n  if (window_focus) {\n    $(\"#focus\").hide();\n  }\n\n  $(window).focus(function () {\n    $(\"#focus\").hide();\n  });\n});\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 170\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/sejaldua/Desktop/DIS/typeracer/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","time_setting","random_setting","input_text","target_setting","$","type","input","target","current","time","random","length","console","log","text","substring","setTimeout","Math","character_length","index","letters","val","started","current_string","wordcount","click","focus","window","keypress","evt","start","event","charCode","which","keyCode","charTyped","String","fromCharCode","charAt","append","timer","wpm","round","stop","finished","errors","interval_timer","reset","show","change","setInterval","clearInterval","blur","hide","alert","window_focus","document","ready","render","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*\n * The animation at the start, made from my previous pen\n * https://codepen.io/EightArmsHQ/pen/HJsav\n */\n\n// The base speed per character\ntime_setting = 30;\n// How much to 'sway' (random * this-many-milliseconds)\nrandom_setting = 100;\n// The text to use NB use \\n not real life line breaks!\ninput_text = \"How fast can you type?\";\n// Where to fill up\ntarget_setting = $(\"#output\");\n// Launch that function!\ntype(input_text, target_setting, 0, time_setting, random_setting);\n\nfunction type(input, target, current, time, random){\n  // If the current count is larger than the length of the string, then for goodness sake, stop\n\tif(current > input.length){\n    // Write Complete\n\t\tconsole.log(\"Complete.\");\n\t}\n\telse{\n\t // console.log(current)\n    // Increment the marker\n\t\tcurrent += 1;\n    // fill the target with a substring, from the 0th character to the current one\n\t\ttarget.text(input.substring(0,current));\n    // Wait ...\n\t\tsetTimeout(function(){\n      // do the function again, with the newly incremented marker\n\t\t\ttype(input, target, current, time, random);\n      // Time it the normal time, plus a random amount of sway\n\t\t},time + Math.random()*random);\n\t}\n}\n\n/*\n * The typing test stuff\n */\n\nvar character_length = 31;\nvar index = 0;\nvar letters =  $(\"#input_text\").val();\nvar started = false;\nvar current_string = letters.substring(index, index + character_length);\n\nvar wordcount = 0;\n\n$(\"html, body\").click(function(){\n  $(\"#textarea\").focus();\n});\n\n$(\"#target\").text(current_string);\n$(window).keypress(function(evt){\n  if(!started){\n    start();\n    started = true;\n  }\n  evt = evt || window.event;\n  var charCode = evt.which || evt.keyCode;\n  var charTyped = String.fromCharCode(charCode);\n  if(charTyped == letters.charAt(index)){\n    if(charTyped == \" \"){\n      wordcount ++;\n      $(\"#wordcount\").text(wordcount);\n    }\n    index ++;\n    current_string = letters.substring(index, index + character_length);\n    $(\"#target\").text(current_string);\n    $(\"#your-attempt\").append(charTyped);\n    if(index == letters.length){\n      wordcount ++;\n      $(\"#wordcount\").text(wordcount);\n      $(\"#timer\").text(timer);\n      if(timer == 0){\n        timer = 1;\n      }\n      wpm = Math.round(wordcount / (timer / 60));\n      $(\"#wpm\").text(wpm);\n      stop();\n      finished();\n    }\n  }else{\n    $(\"#your-attempt\").append(\"<span class='wrong'>\" + charTyped + \"</span>\");\n    errors ++;\n    $(\"#errors\").text(errors);\n  }\n});\n\nvar timer = 0;\nvar wpm = 0;\nvar errors = 0;\nvar interval_timer;\n\n$(\"#reset\").click(function(){\n  reset();\n});\n\n$(\"#change\").click(function(){\n  $(\"#input_text\").show().focus();\n});\n\n$(\"#pause\").click(function(){\n  stop();\n});\n\n$(\"#input_text\").change(function(){\n  reset();\n});\n\nfunction start(){\n  interval_timer = setInterval(function(){\n    timer ++;\n    $(\"#timer\").text(timer);\n    wpm = Math.round(wordcount / (timer / 60));\n    $(\"#wpm\").text(wpm);\n  }, 1000)\n}\n\nfunction stop(){\n  clearInterval(interval_timer);\n  started = false;\n}\n\nfunction reset(){\n  $(\"#input_text\").blur().hide();;\n  $(\"#your-attempt\").text(\"\");\n  index = 0;\n  errors = 0;\n  clearInterval(interval_timer);\n  started = false;\n  letters = $(\"#input_text\").val();\n  $(\"#wpm\").text(\"0\");\n  $(\"#timer\").text(\"0\");\n  $(\"#wordcount\").text(\"0\");\n  timer = 0;\n  wpm = 0;\n  current_string = letters.substring(index, index + character_length);\n  $(\"#target\").text(current_string);\n}\n\nfunction finished(){\n  alert(\"Congratulations!\\nWords per minute: \" + wpm + \"\\nWordcount: \" + wordcount + \"\\nErrors:\" + errors);\n}\n\nvar window_focus;\n\n$(window).focus(function() {\n    window_focus = true;\n}).blur(function() {\n  window_focus = false;\n});\n\n$(document).ready(function(){\n  if(window_focus){\n    $(\"#focus\").hide();\n  }\n  $(window).focus(function() {\n    $(\"#focus\").hide();\n  });\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}